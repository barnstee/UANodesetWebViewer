@using UANodesetWebViewer.Models

@model OpcSessionModel

@{
    ViewData["Title"] = "Browsing Nodeset File(s)";
}

<h1>@ViewData["Title"]</h1>


<div class="container-fluid browser_browse_container col-sm">

    <div class="row browser_top_container col-md">
        <p>
            <div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
                <div id="OpcNodeTree" class="browser_browse_nodetree_container">
                    <ul>
                        <li id="rootnode">
                            @Model.ServerIP
                            <ul>
                                <li></li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="col-lg col-md-offset-2">
                <div class="row">
                    <div class="invisible" id="variableReadContainer">
                        <div class="alert alert-dark" role="alert" id="variableReadHeader"></div>
                        <ul class="list-group">
                            <li class="list-group-item" id="variableReadValue"></li>
                            <li class="list-group-item" id="variableReadStatus"></li>
                            <li class="list-group-item" id="variableReadSourceTimeStamp"></li>
                            <li class="list-group-item" id="variableReadSourceServerStamp"></li>
                        </ul>
                        <div class="input-group mt-2 invisible" id="variableWriteContainer">
                            <input type="text" id="variableWriteInput" class="form-control" placeholder="New value" aria-label="New Value for OPC UA variable" aria-describedby="basic-addon2">
                            <div class="input-group-append">
                                <button onclick="VariableWrite_WriteButton_Click(this)" class="btn btn-secondary" type="button">Write</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="invisible" id="methodContainer">
                        <div class="alert alert-dark" role="alert" id="methodHeader"></div>
                        <div class="input-group">
                            <form id="methodInputContainer">
                            </form>
                        </div>
                        <div class="invisible" id="methodOutputContainer">

                        </div>
                    </div>
                </div>
            </div>
        <p />
    </div>
    <div class="row browser_browse_status_message_container mt-2">
        <p class="alert alert-light">Status: <div class="alert alert-light" id="message">Browsed OPC Server</div></p>
    </div>
    <div class="row browser_browse_disconnect_button mt-2">
        @using (Html.BeginForm("Disconnect", "Browser"))
        {
<input id="disconnectButton" class="btn btn-primary btn_browser" type="submit" value="Close" />}
    </div>
    <div class="row browser_browse_disconnect_button mt-2">
        <br />
        <br />
        Generate a Plattform Industrie 4.0 Asset Admin Shell from the loaded nodeset files
    </div>
    <div class="row browser_browse_disconnect_button mt-2">
        @using (Html.BeginForm("GenerateAAS", "Browser"))
        {
<input id="generateAASButton" class="btn btn-primary btn_browser" type="submit" value="Generate AAS" />}
    </div>
</div>

@section scripts {
    <script src="~/lib/jstree/jstree.min.js"></script>
    <script>
        var title = "TitleBrowser";

        $(async function () {
            //connection to SignalR hub
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/statusHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // Create a function that the hub can call back to display messages
            connection.on("addNewMessageToPage", (session, message) => {
                $('#message').text(message);
            });

            // Start/continue the connection
            async function establishSignalRConnection() {
                try {
                    await connection.start();
                    console.log("connection to signalr hub successfull established");
                } catch (err) {
                    console.warn("Error creating SignalR connection, retry in 5 seconds %o", err);
                    setTimeout(async () => { await establishSignalRConnection() }, 5000);
                }
            };

            connection.onclose(async () => {
                await establishSignalRConnection();
            });

            // Start the connection.
            await establishSignalRConnection();
        });

        function getRightLeftDiv(leftContent, rightContent) {
            return "<div class=\"bg-light d-flex justify-content-between\">"
                + "<div>" + leftContent + "</div>"
                + "<div>" + rightContent + "</div>"
                + "</div>";
        }

        function VariableRead(obj, onSuccess) {
            $("#variableWriteContainer").addClass('invisible');

            $.post({
                url: "/Browser/VariableRead",
                data: { __RequestVerificationToken: $('[name=__RequestVerificationToken]').val(), jstreeNode: obj.item.nodeId },
                success: function (data) {
                    $("#variableReadContainer").removeClass("invisible");

                    console.log("callback node name: " + obj.item.nodeName);
                    $("#variableReadHeader").html(obj.item.nodeName);

                    console.log("callback got results: " + data);
                    var dataContainer = JSON.parse(data);

                    $("#variableReadValue").html(getRightLeftDiv("<strong>Value:</strong>", dataContainer.value));
                    $("#variableReadStatus").html(getRightLeftDiv("<strong>Status:</strong>", dataContainer.status));
                    $("#variableReadSourceTimeStamp").html(getRightLeftDiv("<strong>Source Timestamp:</strong>", dataContainer.sourceTimestamp));
                    $("#variableReadSourceServerStamp").html(getRightLeftDiv("<strong>Server Timestamp:</strong>", dataContainer.serverTimestamp));

                    if (typeof onSuccess !== "undefined" && onSuccess !== null) {
                        onSuccess();
                    }
                },
                error: function (response) {
                    console.log("Got error reading opc variable: %o", response);
                }
            });
        }

        function VariableWrite(obj) {
            VariableRead(obj, function () {
                $("#variableWriteContainer").attr("nodeId", obj.item.nodeId);
                $("#variableWriteContainer").removeClass('invisible');
            });
        }

        function VariableWrite_WriteButton_Click() {
            var newVal = $("#variableWriteInput").val();
            var id = $("#variableWriteContainer").attr("nodeId");
            console.log("updating value of " + id + " to " + newVal);

            $.post({
                url: "/Browser/VariableWrite",
                data: { __RequestVerificationToken: $('[name=__RequestVerificationToken]').val(), jstreeNode: id, newValue: newVal },
                success: function (data) {
                    if (data.status === "ok") {
                        console.log("Writing OPC UA attribute value successfull " + data);
                    }
                    else {
                        console.warn("Writing OPC UA attribute value failed " + data);
                    }
                },
                error: function (response) {
                    console.error("Error updating value of node: %o ", response);
                }
            });
        }

        function MethodCall(obj) {
            $("#methodHeader").html(obj.item.nodeName);
            $("#methodContainer").removeClass('invisible');

            $.post({
                url: "/Browser/MethodCallGetParameter",
                data: { __RequestVerificationToken: $('[name=__RequestVerificationToken]').val(), jstreeNode: obj.item.nodeId },
                success: function (data) {
                    console.log("Loaded parameter for method " + obj.item.nodeName + " " + data);

                    var $methodInput = $("#methodInputContainer");
                    $methodInput.empty();

                    if (data.count === 0) {
                        $("#methodInputContainer").append("<strong>No Input Parameter!</strong> <br />");
                    } else {
                        for (var i = 0; i < data.count; i++) {

                            console.log("Append fields for parameter: %o", data.parameter[i]);

                            var parameterInput = "<div class=\"form-group\">"
                                + "<div class=\"input-group mb-2\">"
                                + "<div class=\"input-group-prepend\">"
                                + "<span class=\"input-group-text\">" + data.parameter[i].name + "</span>"
                                + "<span class=\"input-group-text\">" + data.parameter[i].typename + "</span>"
                                + "</div>"
                                + "<input type=\"text\" class=\"form-control\" placeholder=\"" + data.parameter[i].description + "\" id=\"methodCall_parameter_" + i + "\" />"
                                + "</div>"
                                + "</div>";
                            $methodInput.append(parameterInput);
                        }

                        // save context information at form control for call method
                        $methodInput.attr("parameterData", JSON.stringify(data));
                    }
                    $methodInput.append("<button onclick=\"MethodCall_CallButton_Click()\" class=\"btn btn-secondary\" type=\"button\">Call Method</button>");

                    $methodInput.attr("nodeId", JSON.stringify(obj.item.nodeId));
                },
                error: function (response) {
                    console.error("Error during reading of opc method parameter %o", response);
                }
            });
        }

        function MethodCall_CallButton_Click() {
            $("#methodOutputContainer").removeClass('invisible');
            console.log("Calling Method");
            var $methodInput = $("#methodInputContainer");
            var jsonString = $methodInput.attr("parameterData");
            var parameterOriginalData = "";
            if (typeof jsonString !== "undefined" && jsonString !== "") {
                parameterOriginalData = JSON.parse(jsonString);
            } else {
                parameterOriginalData.parameter = "";
            }

            console.log("parameterData: " + parameterOriginalData.parameter);

            var id = JSON.parse($methodInput.attr("nodeId"));
            console.log("NodeId " + id);

            var parameterValues = [];
            for (var i = 0; parameterOriginalData != undefined && i < parameterOriginalData.count; i++) {
                var parameterId = "#methodCall_parameter_" + i;
                var parameterVal = $(parameterId).val();
                parameterValues.push(parameterVal );
            }

            console.log("parameterValues: " + parameterValues);

            $.post({
                url: "/Browser/MethodCall",
                data: { __RequestVerificationToken: $('[name=__RequestVerificationToken]').val(), jstreeNode: id, parameterData: JSON.stringify(parameterOriginalData.parameter), parameterValues: JSON.stringify(parameterValues) },
                success: function (data) {
                    console.log("Called method successfully %o", data);

                    if (data.status === "ok") {
                        for (var i = 0; i < data.numberOfOutputArguments; i++) {
                            var content = getRightLeftDiv("<strong>" + i + "</strong>", data.numberOfOutputArguments[i]);
                            $("#methodOutputContainer").append(content);
                        }
                    } else {
                        console.warn("Error during calling method %o", data);
                    }
                },
                error: function (response) {
                    console.error("Error during invoke opc method %o", response);
                }
            });
        }

        function OpcServerMenu(node) {
            var result = {};

            if (node.original.nodeClass === "Variable" && (node.original.accessLevel & 0x01)) {
                $.extend(result, {
                    "Read": {
                        "separator_before": false,
                        "separator_after": false,
                        "label": "Read",
                        "nodeId": node.id,
                        "nodeName": node.text,
                        "action": function (obj) {
                            VariableRead(obj);
                        }
                    }
                });
            }

            if (node.original.nodeClass === "Variable" && (node.original.accessLevel & 0x01)) {
                $.extend(result, {
                    "Write": {
                        "separator_before": false,
                        "separator_after": false,
                        "label": "Write",
                        "nodeId": node.id,
                        "nodeName": node.text,
                        "action": function (obj) {
                            VariableWrite(obj);
                        }
                    }
                });
            }

            if (node.original.nodeClass === "Method") {
                $.jstree.reference('#OpcNodeTree').refresh_node(node);
                if (node.original.executable === "True") {
                    $.extend(result, {
                        "Call": {
                            "separator_before": false,
                            "separator_after": false,
                            "label": "Call",
                            "nodeId": node.id,
                            "nodeName": node.text,
                            "action": function (obj) {
                                MethodCall(obj);
                            }
                        }
                    });
                }
            }

            return result;
        }

        var back;
        $(function ($) {
            back = document.referrer;
            $("#hiddenBackUrl").val(back);

            $("#disconnectButton").attr("enabled", "enabled");
            $('#OpcNodeTree').on(
                "init.jstree", function () {
                });
        });

        $(function ($) {
            $('#OpcNodeTree').jstree({
                "plugins": ["wholerow", "contextmenu", "types"],

                "core": {
                    "themes": {
                        "name": "default",
                        "dots": true,
                        "icons": true,
                        "stripes": true,
                        "responsive": true
                    },
                    "data": {
                        "type": "POST",
                        "cache": false,
                        "async": false,
                        "url": function (node) {
                            return node.id === "#" ? "/Browser/GetRootNode" : "/Browser/GetChildren";
                        },
                        "data": function (node) {
                            return { __RequestVerificationToken: $('[name=__RequestVerificationToken]').val(), jstreeNode: node.id };
                        },
                        "error": function (xdr) {
                            console.error("Error while reading opc ua nodes %o", xdr);
                        }
                    }
                },

                "types": {
                    "default": {
                        "icon": "glyphicon"
                    },
                    "published": {
                        "icons": true,
                        "icon": "glyphicon glyphicon-ok"
                    }
                },

                "contextmenu": {
                    "show_at_node": false,
                    "items": OpcServerMenu
                }
            });
        });

        $(function ($) {
            $('#OpcNodeTree').on('ready.jstree', function (e, data) {
                var nodes = $('#OpcNodeTree').jstree('get_json');
                $(this).jstree("open_node", nodes);
            });

            $('#OpcNodeTree').on('open_node.jstree', function (e, data) {
                var $table = $('#publishNodesTable');
                $table.bootstrapTable('removeAll');

                for (var node in data.instance._model.data) {
                    if (node != "#") {
                        var nodeOriginal = $(this).jstree(true).get_node(node).original;
                        if (nodeOriginal.publishedNode == true) {

                            $('#publishedNodesContainer').removeClass('invisible');

                            var jsonNode = $(this).jstree(true).get_node(node)

                            $table.bootstrapTable('append', {
                                nodeId: nodeOriginal.id,
                                name: nodeOriginal.text,
                                nodeClass: nodeOriginal.nodeClass
                            });

                            $table.bootstrapTable('scrollTo', 'bottom');

                            $(this).jstree(true).set_type(jsonNode, "published")
                        }
                        else {
                            var jsonNode = $(this).jstree(true).get_node(node)
                            $(this).jstree(true).set_type(jsonNode, "default")
                        }
                    }
                }
            });
        });
    </script>
}